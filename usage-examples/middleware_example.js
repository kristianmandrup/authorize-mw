// Generated by LiveScript 1.2.0
(function(){
  var authorize, Middleware, AuthorizeMw, Permit, permitFor, Book, book, GuestUser, guestUser, GuestPermit, guestPermit, basicAuthorizeMws, authMiddleware, readBooksRequest, allowed;
  authorize = require('authorize-mw');
  Middleware = require('middleware').Middleware;
  AuthorizeMw = authorize.AuthorizeMw;
  Permit = authorize.Permit;
  permitFor = authorize.permitFor;
  Book = (function(superclass){
    var prototype = extend$((import$(Book, superclass).displayName = 'Book', Book), superclass).prototype, constructor = Book;
    function Book(obj){
      Book.superclass.apply(this, arguments);
    }
    return Book;
  }(Base));
  book = new Book({
    title: title
  });
  GuestUser = (function(superclass){
    var prototype = extend$((import$(GuestUser, superclass).displayName = 'GuestUser', GuestUser), superclass).prototype, constructor = GuestUser;
    function GuestUser(obj){
      GuestUser.superclass.apply(this, arguments);
    }
    prototype.role = 'guest';
    return GuestUser;
  }(User));
  guestUser = new GuestUser({
    name: 'unknown'
  });
  GuestPermit = GuestPermit = (function(superclass){
    var prototype = extend$((import$(GuestPermit, superclass).displayName = 'GuestPermit', GuestPermit), superclass).prototype, constructor = GuestPermit;
    prototype.match = function(access){
      return this.matches(access).user({
        role: 'guest'
      });
    };
    function GuestPermit(){
      GuestPermit.superclass.apply(this, arguments);
    }
    return GuestPermit;
  }(Permit));
  guestPermit = permitFor(GuestPermit, 'guest books', {
    rules: {
      ctx: {
        area: {
          guest: function(){
            return this.ucan('publish', 'Paper');
          },
          admin: function(){
            return this.ucannot('publish', 'Paper');
          }
        }
      },
      read: function(){
        return this.ucan('read', 'Book');
      },
      write: function(){
        return this.ucan('write', 'Book');
      },
      'default': function(){
        return this.ucan('read', 'any');
      }
    }
  });
  basicAuthorizeMws = new AuthorizeMw({
    currentUser: guestUser
  });
  authMiddleware = new Middleware('model', {
    data: books.hello
  });
  authMiddleware.use({
    authorize: basicAuthorizeMws
  });
  readBooksRequest = {
    action: 'read',
    collection: 'books'
  };
  allowed = authMiddleware.run(readBooksRequest);
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
