// Generated by LiveScript 1.2.0
(function(){
  var ModelMw, ModelRunner, authorize, Ability, Authorizer, Debugger, AuthorizeMw, toString$ = {}.toString;
  ModelMw = require('model-mw').mw;
  ModelRunner = require('model-mw').runner;
  authorize = require('permit-authorize');
  Ability = authorize.Ability;
  Authorizer = authorize.Authorizer;
  Debugger = require('./debugger');
  module.exports = AuthorizeMw = (function(superclass){
    var prototype = extend$((import$(AuthorizeMw, superclass).displayName = 'AuthorizeMw', AuthorizeMw), superclass).prototype, constructor = AuthorizeMw;
    importAll$(prototype, arguments[1]);
    function AuthorizeMw(context){
      AuthorizeMw.superclass.apply(this, arguments);
      if (toString$.call(this.context).slice(8, -1) !== 'Object') {
        throw Error("AuthorizeMw construction requires Object, was: " + this.context);
      }
      if (!this.context.currentUser) {
        throw Error("AuthorizeMw construction requires Object with a current-user, was: " + this.context);
      }
      this.currentUser = this.context.currentUser;
      if (!this.currentUser) {
        throw Error("No currentUser to be authorized");
      }
    }
    prototype.run = function(args){
      this.debug('run', args);
      superclass.prototype.run.apply(this, arguments);
      return this.authorizer().run(args.action, this.subject(), this.ctx);
    };
    prototype.runAlone = function(ctx){
      this.debug('run-alone', ctx);
      return superclass.prototype.runAlone.apply(this, arguments);
    };
    prototype.clear = function(){
      return this.myAuthorizer = void 8;
    };
    prototype.authorizer = function(){
      return this.myAuthorizer || (this.myAuthorizer = this.createAuthorizer());
    };
    prototype.createAuthorizer = function(){
      new Authorizer(this.currentUser);
      if (this.debugging) {
        a.debugOn();
      }
      return a;
    };
    prototype.subject = function(){
      return this.data || this.model;
    };
    return AuthorizeMw;
  }(ModelMw, Debugger));
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
